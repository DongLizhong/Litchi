<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.litchi.litchidataserver.mapper.DataMapper" >
  <resultMap id="BaseResultMap" type="cn.litchi.model.entity.Data" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="l_id" property="lId" jdbcType="BIGINT" />
    <result column="n_id" property="nId" jdbcType="BIGINT" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="temp" property="temp" jdbcType="VARCHAR" />
    <result column="humi" property="humi" jdbcType="VARCHAR" />
    <result column="lx" property="lx" jdbcType="VARCHAR" />
    <result column="Tlx" property="tlx" jdbcType="VARCHAR" />
    <result column="water" property="water" jdbcType="VARCHAR" />
    <result column="co2" property="co2" jdbcType="VARCHAR" />
    <result column="wind_direction" property="windDirection" jdbcType="TINYINT" />
    <result column="wind_strength" property="windStrength" jdbcType="VARCHAR" />
    <result column="rainfall" property="rainfall" jdbcType="VARCHAR" />
    <result column="volt" property="volt" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, l_id, n_id, time, temp, humi, lx, Tlx, water, co2, wind_direction, wind_strength, 
    rainfall, volt
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.litchi.model.entity.DataExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from data
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from data
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from data
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.litchi.model.entity.DataExample" >
    delete from data
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.litchi.model.entity.Data" >
    insert into data (id, l_id, n_id, time, 
      temp, humi, lx, Tlx, 
      water, co2, wind_direction, 
      wind_strength, rainfall, volt
      )
    values (#{id,jdbcType=BIGINT}, #{lId,jdbcType=BIGINT}, #{nId,jdbcType=BIGINT}, #{time,jdbcType=TIMESTAMP}, 
      #{temp,jdbcType=VARCHAR}, #{humi,jdbcType=VARCHAR}, #{lx,jdbcType=VARCHAR}, #{tlx,jdbcType=VARCHAR}, 
      #{water,jdbcType=VARCHAR}, #{co2,jdbcType=VARCHAR}, #{windDirection,jdbcType=TINYINT}, 
      #{windStrength,jdbcType=VARCHAR}, #{rainfall,jdbcType=VARCHAR}, #{volt,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.litchi.model.entity.Data" >
    insert into data
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="lId != null" >
        l_id,
      </if>
      <if test="nId != null" >
        n_id,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="temp != null" >
        temp,
      </if>
      <if test="humi != null" >
        humi,
      </if>
      <if test="lx != null" >
        lx,
      </if>
      <if test="tlx != null" >
        Tlx,
      </if>
      <if test="water != null" >
        water,
      </if>
      <if test="co2 != null" >
        co2,
      </if>
      <if test="windDirection != null" >
        wind_direction,
      </if>
      <if test="windStrength != null" >
        wind_strength,
      </if>
      <if test="rainfall != null" >
        rainfall,
      </if>
      <if test="volt != null" >
        volt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="lId != null" >
        #{lId,jdbcType=BIGINT},
      </if>
      <if test="nId != null" >
        #{nId,jdbcType=BIGINT},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="temp != null" >
        #{temp,jdbcType=VARCHAR},
      </if>
      <if test="humi != null" >
        #{humi,jdbcType=VARCHAR},
      </if>
      <if test="lx != null" >
        #{lx,jdbcType=VARCHAR},
      </if>
      <if test="tlx != null" >
        #{tlx,jdbcType=VARCHAR},
      </if>
      <if test="water != null" >
        #{water,jdbcType=VARCHAR},
      </if>
      <if test="co2 != null" >
        #{co2,jdbcType=VARCHAR},
      </if>
      <if test="windDirection != null" >
        #{windDirection,jdbcType=TINYINT},
      </if>
      <if test="windStrength != null" >
        #{windStrength,jdbcType=VARCHAR},
      </if>
      <if test="rainfall != null" >
        #{rainfall,jdbcType=VARCHAR},
      </if>
      <if test="volt != null" >
        #{volt,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.litchi.model.entity.DataExample" resultType="java.lang.Integer" >
    select count(*) from data
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update data
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.lId != null" >
        l_id = #{record.lId,jdbcType=BIGINT},
      </if>
      <if test="record.nId != null" >
        n_id = #{record.nId,jdbcType=BIGINT},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.temp != null" >
        temp = #{record.temp,jdbcType=VARCHAR},
      </if>
      <if test="record.humi != null" >
        humi = #{record.humi,jdbcType=VARCHAR},
      </if>
      <if test="record.lx != null" >
        lx = #{record.lx,jdbcType=VARCHAR},
      </if>
      <if test="record.tlx != null" >
        Tlx = #{record.tlx,jdbcType=VARCHAR},
      </if>
      <if test="record.water != null" >
        water = #{record.water,jdbcType=VARCHAR},
      </if>
      <if test="record.co2 != null" >
        co2 = #{record.co2,jdbcType=VARCHAR},
      </if>
      <if test="record.windDirection != null" >
        wind_direction = #{record.windDirection,jdbcType=TINYINT},
      </if>
      <if test="record.windStrength != null" >
        wind_strength = #{record.windStrength,jdbcType=VARCHAR},
      </if>
      <if test="record.rainfall != null" >
        rainfall = #{record.rainfall,jdbcType=VARCHAR},
      </if>
      <if test="record.volt != null" >
        volt = #{record.volt,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update data
    set id = #{record.id,jdbcType=BIGINT},
      l_id = #{record.lId,jdbcType=BIGINT},
      n_id = #{record.nId,jdbcType=BIGINT},
      time = #{record.time,jdbcType=TIMESTAMP},
      temp = #{record.temp,jdbcType=VARCHAR},
      humi = #{record.humi,jdbcType=VARCHAR},
      lx = #{record.lx,jdbcType=VARCHAR},
      Tlx = #{record.tlx,jdbcType=VARCHAR},
      water = #{record.water,jdbcType=VARCHAR},
      co2 = #{record.co2,jdbcType=VARCHAR},
      wind_direction = #{record.windDirection,jdbcType=TINYINT},
      wind_strength = #{record.windStrength,jdbcType=VARCHAR},
      rainfall = #{record.rainfall,jdbcType=VARCHAR},
      volt = #{record.volt,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.litchi.model.entity.Data" >
    update data
    <set >
      <if test="lId != null" >
        l_id = #{lId,jdbcType=BIGINT},
      </if>
      <if test="nId != null" >
        n_id = #{nId,jdbcType=BIGINT},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="temp != null" >
        temp = #{temp,jdbcType=VARCHAR},
      </if>
      <if test="humi != null" >
        humi = #{humi,jdbcType=VARCHAR},
      </if>
      <if test="lx != null" >
        lx = #{lx,jdbcType=VARCHAR},
      </if>
      <if test="tlx != null" >
        Tlx = #{tlx,jdbcType=VARCHAR},
      </if>
      <if test="water != null" >
        water = #{water,jdbcType=VARCHAR},
      </if>
      <if test="co2 != null" >
        co2 = #{co2,jdbcType=VARCHAR},
      </if>
      <if test="windDirection != null" >
        wind_direction = #{windDirection,jdbcType=TINYINT},
      </if>
      <if test="windStrength != null" >
        wind_strength = #{windStrength,jdbcType=VARCHAR},
      </if>
      <if test="rainfall != null" >
        rainfall = #{rainfall,jdbcType=VARCHAR},
      </if>
      <if test="volt != null" >
        volt = #{volt,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.litchi.model.entity.Data" >
    update data
    set l_id = #{lId,jdbcType=BIGINT},
      n_id = #{nId,jdbcType=BIGINT},
      time = #{time,jdbcType=TIMESTAMP},
      temp = #{temp,jdbcType=VARCHAR},
      humi = #{humi,jdbcType=VARCHAR},
      lx = #{lx,jdbcType=VARCHAR},
      Tlx = #{tlx,jdbcType=VARCHAR},
      water = #{water,jdbcType=VARCHAR},
      co2 = #{co2,jdbcType=VARCHAR},
      wind_direction = #{windDirection,jdbcType=TINYINT},
      wind_strength = #{windStrength,jdbcType=VARCHAR},
      rainfall = #{rainfall,jdbcType=VARCHAR},
      volt = #{volt,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>